% MotionGenesis file:  PingpongTrajectoryForEventHandling.txt
% Copyright (c) 2016 Motion Genesis LLC.  All rights reserved.
%--------------------------------------------------------------------
SetUnitSystem   lbm, ft, sec      % Set default units to US units (not SI units).
NewtonianFrame  N                 % Earth (baseball park).
Particle        Q                 % Baseball.
%--------------------------------------------------------------------
Variable   x'',  y''              % Ball's horizontal and vertical measures.
Constant   g = 9.8 m/s^2          % Gravity 
Constant   rho = 1.1123 kg/m^3    % Density of air Sherbrooke, 25Celcius
Constant   r = 0.02 m	          % Ball's radius 
Constant   coefDrag = 0.47 noUnits % Ball's coefficient of drag.
Constant   thetaDegrees           % Launch angle (in degrees)			
Q.SetMass( m = 0.0027 kg )
%--------------------------------------------------------------------
%      Translational kinematics (position, velocity, acceleration).
Q.Translate( No, x*Nx> + y*Ny> )
%--------------------------------------------------------------------
%      Add relevant forces (aerodynamic and gravity).
v> = Q.GetVelocity( N )
vMag = GetMagnitude( v> )
Area = pi*r^2
DragForce> = -1/2 * rho * Area * coefDrag * vMag * v>
Q.AddForce( DragForce> - m*g*Ny> )
%--------------------------------------------------------------------
%      Form equations of motion with F = m*a.  Solve for x'', y''.
DynamicEqn[1] = Dot( Nx>,  Q.GetDynamics() )
DynamicEqn[2] = Dot( Ny>,  Q.GetDynamics() )
Solve( DynamicEqn = 0,   x'',  y''  )
%--------------------------------------------------------------------
%      Input integration parameters and initial values.
Input  tFinal = 1.6 sec,  tStep = 0.01 sec,  absError = 1.0E-7
Input  x = 0 m,  x' =  5.742 * cosDegrees(45) m/s
Input  y = 0.3 m,  y' = 5.742 * sinDegrees(45) m/s
%--------------------------------------------------------------------
%       Note: Edit/implement the following in MGBaseballTrajectoryFma.m
%%  xp                              =  100*cosd(thetaDegrees); % mph                 Initial Value
%%  yp                              =  100*sind(thetaDegrees); % mph                 Initial Value
%%  mdlDerivatives( t, VAR, uSimulink );
%%  mdlOutputs(     t, VAR, uSimulink );
%%  functionsToEvaluateForEvent = [ y ];
%%  eventTerminatesIntegration1Otherwise0ToContinue = [ 0 ];
%%  yp = -0.7 * yp; 
%%  eventDirection_AscendingIs1_CrossingIs0_DescendingIsNegative1 = [ -1 ];
%--------------------------------------------------------------------
%       List output quantities and solve ODEs.
OutputPlot  x m,  y m
%OutputPlot  t sec, x' m/s,  y' m/s,  vMag m/s
ODE()
%ODE()  MGBaseballTrajectoryFma.m( thetaDegrees )
%--------------------------------------------------------------------
%Save MGBaseballTrajectoryFmaForEventHandling.all
%Quit
